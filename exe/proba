#!/usr/bin/env ruby

require 'probatio'


#
# gather opts

args = ARGV.dup

def rework_switch(a)

  case a
  when '-n', '--name' then '--name'
  when '-e', '--exclude' then '--exclude'
  when '-s', '--seed' then '--seed'
  else nil
  end
end

switches = {}
dirs, files, strings, integers = [], [], [], []

while a = args.shift

  if a.match?(/^(-[a-z]|--[a-z0-9][-a-z0-9]+)$/i)
    if k = rework_switch(a)
      (switches[k] ||= []) << args.shift
    else
      switches[a] = true
    end
  elsif File.directory?(a) && a != '.'
    dirs << a
  elsif File.file?(a.split(':').first)
    files << a
  elsif a.match?(/\A-?\d+\z/)
    integers << a.to_i
  else
    strings << a
  end
end

$DEBUG = true if switches['-d']

if $DEBUG
  puts " * switches:  " + switches.inspect
  puts " * strings:   " + strings.inspect
  puts " * integers:  " + integers.inspect
end

if switches['-h'] || switches['--help']

    puts %{
  Usage: bundle exec proba [OPTIONS] [FILES] [DIRS]

  A test runner for Ruby.

  Options:
    -h, --help             Show this help message and quit
    --version              Show proba's version and exit
    -m, --monochrome       Disable colour output
    -c, --color            Enable colour output anyway
    -y, --dry              Don't run the test, just flag them as successes
    -n, --name PATTERN     include tests matching /regexp/ or string in run
    -e, --exclude PATTERN  Exclude /regexp/ or string from run
    -p, --print            Dumps the test tree
    -s, --seed             Sets random seed
    -d, --debug            Sets $DEBUG to true
    -x, --example          Outputs an example test file
    -X, --plugin-example   Outputs an example plugin file

  Files:
    TODO

  Dirs:
    TODO

  Examples:
    # Run all tests in a dir
    bundle exec proba test/

    # Run all the tests in a file
    bundle exec proba test/this_test.rb
      }.rstrip + "\n\n"
  exit 0
end

if switches['--version']

  puts "proba -- probatio test tool -- #{Probatio::VERSION}"
  exit 0

elsif switches['-x'] || switches['--example']

  puts File.read(File.join(__dir__, '../lib/probatio/examples/a_test.rb'))
  exit 0

elsif switches['-X'] || switches['--plugin-example']

  puts File.read(File.join(__dir__, '../lib/probatio/examples/a_plugin.rb'))
  exit 0
end

opts = {}

opts[:mono] = true \
  if switches['-m'] || switches['--monochrome'] || switches['--no-color']
opts[:colour] = false \
  if switches['-c'] || switches['--color'] || switches['--colour']

opts[:dry] = true if switches['-y'] || switches['--dry']

opts[:print] = true if switches['-p'] || switches['--print']

opts[:dirs] = dirs if dirs.any?
opts[:files] = files.any? ? files : []

prev = Kernel.eval(File.read(Probatio.opath)) rescue { failures: [] }
fails = prev[:failures].collect { |f| "#{f[:p]}:#{f[:l]}" }
#pp fails
  #
tpoint = File.exist?(Probatio.tpath) ? File.read(Probatio.tpath).strip : nil
  #
strings.each do |s|
  opts[:files] <<
    case s
    when '.' then tpoint
    when '1st', 'first' then fails[0]
    when 'last' then fails[-1]
    when /^:\d+$/ then fails.find { |f| f.end_with?(s) }
    else nil; end
end
integers.each do |i|
  opts[:files] << fails[i]
end
  #
opts[:files] = opts[:files].uniq.compact
opts[:files] = nil if opts[:files].empty? && strings.empty? && integers.empty?
#puts "-" * 40
#p [ strings, integers ]
#p [ 'fff',  opts[:files] ]

opts[:dirs] = [ 'test' ] unless opts[:dirs] || opts[:files]

opts[:includes] = Probatio.to_rexes_and_strs(switches['--name'])
opts[:excludes] = Probatio.to_rexes_and_strs(switches['--exclude'])

s = switches['--seed'] || []
s = s.any? ? s.first : (Time.now.to_f * 1000) % 99_999
opts[:seed] = s.to_i

puts " * opts: " + opts.inspect if $DEBUG

#
# run

Probatio.run(opts)


# vim: set filetype=ruby

