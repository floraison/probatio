#!/usr/bin/env ruby

require 'probatio'


#
# gather opts

args = ARGV.dup

def rework_switch(a)

  case a
  when '-n', '--name' then '--name'
  when '-e', '--exclude' then '--exclude'
  when '-s', '--seed' then '--seed'
  when '-d', '--debug' then '--debug'
  else nil
  end
end

def is_directory_with_tests?(path)

  File.directory?(path) &&
  Dir[File.join(path, '**', '*_test.rb')].any?
end

switches = {}
dirs, files, lists, strings, environments, integers = [], [], [], [], [], []

while a = args.shift

  if a.match?(/^(-[a-z]|--[a-z0-9][-a-z0-9]+)$/i)
    if k = rework_switch(a)
      (switches[k] ||= []) << args.shift
    else
      switches[a] = true
    end
  elsif File.directory?(a) && a != '.'
    dirs << a
  elsif File.file?(a) && (a.match?(/(\.txt|_list\.rb)$/))
    lists << a
  elsif File.file?(a.split(':').first)
    files << a
  elsif a.match?(/\A-?\d+\z/)
    integers << a.to_i
  elsif a.match?(/\A[A-Z][A-Z0-9]*\z/)
    environments << a
  else
    strings << a
  end
end

$_PROBATIO_COLOURS =
  switches['-C'] || switches['--no-color'] ? Colorato.no_colours :
  switches['-c'] || switches['--color'] ? Colorato.colours :
  ( ! $stdout.tty?) ? Colorato.no_colours :
  Colorato.colours

$_PROBATIO_DEBUG =
  (switches['--debug'] || []).join.downcase.chars.collect(&:to_sym)
$DEBUG =
  true if $_PROBATIO_DEBUG.include?(:r)

Probatio.dbg_s {
  ' * switches:      ' + switches.inspect + "\n" +
  ' * strings:       ' + strings.inspect + "\n" +
  ' * integers:      ' + integers.inspect + "\n" +
  ' * environments:  ' + environments.inspect }

if switches['-h'] || switches['--help']

    puts %{
  Usage: bundle exec proba [OPTIONS] [DIRS] [FILES] [OTHERS] [ENVS]

  A test runner for Ruby.

  Options:
    -h, --help             Show this help message and quit
    --version              Show proba's version and exit
    -c, --color            Enable colour output anyway
    -C, --no-color         Disable colour output
    -y, --dry              Don't run the tests, just flag them as successes
    -n, --name PATTERN     include tests matching /regexp/ or string in run
    -e, --exclude PATTERN  Exclude /regexp/ or string from run
    -p, --print            Dumps the test tree
    -m, --map              Dumps the test file map
    -s, --seed             Sets random seed
    -d, --debug smr        's' for start opts, 'm' for messages, 'r' for $DEBUG
    -x, --example          Outputs an example test file
    -X, --plugin-example   Outputs an example plugin file
    --mangle               Turns the given _spec.rb files into proba _test.rb

  Dirs:
    Defaults to test/ if no files nor dir are given.
    Probatio will look at all the *_helper[s].rb, *_test[s].rb files
    under the given dirs and also at the setup.rb, *_setup.rb files

  Files:
    List of test files to scan for tests.
    A file may end with `:123` to indicate that the test at line 123 should
    be run. Multiple "colon-lnumber" suffixes may be specified, as in
    `test/fun/that_test.rb:123:456`

  Others:
    Short codes like
    * `bundle exec proba -1`
    * `bundle exec proba last` run the last failing test of the last run
    * `bundle exec proba first`
    * `bundle exec proba 1st`
    * `bundle exec proba 0` run the first failing test of the last run
  Lists:
    * `bundle exec proba list.txt` will run all the tests in list.txt
    * `bundle exec proba a_list.rb` will eval and lists the arrayed tests


  Envs:
    Short FULLCAPS environment variable setters driven by a
    `.probatio-environments.rb` file in the current work directory.

    ```
    # .probatio-environments.rb
    {
      D: { 'FLOR_DEBUG' => 'dbg,stdout' },
      DD: { 'FLOR_DEBUG' => 'dbg,sto,stdout' },
    }
    ```

  Examples:
    # Run all tests in a dir
    bundle exec proba test/

    # Run all the tests in a file
    bundle exec proba test/this_test.rb
      }.rstrip + "\n\n"
  exit 0
end

if switches['--version']

  puts "proba -- probatio test tool -- #{Probatio::VERSION}"
  exit 0

elsif switches['-x'] || switches['--example']

  puts File.read(File.join(__dir__, '../lib/probatio/examples/a_test.rb'))
  exit 0

elsif switches['-X'] || switches['--plugin-example']

  puts File.read(File.join(__dir__, '../lib/probatio/examples/a_plugin.rb'))
  exit 0

elsif switches['--mangle']

  require 'probatio/mangle'
  Probatio.mangle(dirs, files, switches)
  exit 0
end

opts = {}

opts[:dry] = true if switches['-y'] || switches['--dry']

opts[:map] = true if switches['-m'] || switches['--map']
opts[:print] = true if switches['-p'] || switches['--print']

opts[:dirs] = dirs if dirs.any?
opts[:files] = files.any? ? files : []

def read_list(a, item)

  case item
  when Array
    item.each { |e| read_list(a, e) }
  when Hash
    if item[:p].is_a?(String)
      a << [ item[:p], item[:l] ].compact.collect(&:to_s).join(':')
    elsif (fs = item[:failures] || item[:files] || item[:paths]).is_a?(Array)
      read_list(a, fs)
    #else
      # no item to add...
    end
  else
    s = item.to_s.strip
    a << s if File.file?(s.split(':').first)
  end

  a
end

prev = Kernel.eval(File.read(Probatio.opath)) rescue { failures: [] }
fails = prev[:failures].collect { |f| "#{f[:p]}:#{f[:l]}" }
#print 'fails:'; pp fails
  #
tpoint = File.exist?(Probatio.tpath) ? File.read(Probatio.tpath).strip : nil
  #
strings.each do |s|
  opts[:files] <<
    case s
    when '.' then tpoint
    when 'f' then tpoint && tpoint.split(':').first
    when '1st', 'first' then fails[0]
    when 'last' then fails[-1]
    when /^:\d+$/ then fails.find { |f| f.end_with?(s) }
    else nil; end
end
integers.each do |i|
  opts[:files] << fails[i]
end
lists.each do |li|
  opts[:files].concat(
    li.end_with?('_list.rb') ? read_list([], Kernel.eval(File.read(li))) :
    read_list([], File.readlines(li)))
end
  #
opts[:files] = opts[:files].uniq.compact
opts[:files] = nil if opts[:files].empty? && strings.empty? && integers.empty?

opts[:dirs] = [
  is_directory_with_tests?('test') ? 'test' :
  is_directory_with_tests?('spec') ? 'spec' :
  'test'
    ] unless opts[:dirs] || opts[:files]

opts[:includes] = Probatio.to_rexes_and_strs(switches['--name'])
opts[:excludes] = Probatio.to_rexes_and_strs(switches['--exclude'])

s = switches['--seed'] || []
s = s.any? ? s.first : (Time.now.to_f * 1000) % 99_999
opts[:seed] = s.to_i

if environments.any?
  envs =
    (File.exist?(Probatio.epath) &&
     Kernel.eval(File.read(Probatio.epath)) rescue nil) ||
    {}
  environments.each do |e|
    (envs[e.to_sym] || {}).each { |k, v|
      Probatio.dbg_s { " . setting ENV[#{k.inspect}] to #{v.inspect}" }
      ENV[k] = v }
  end
end

Probatio.dbg_s { ' * opts: ' + opts.inspect }

if strings & %w[ . 1st first last ]
  puts $_PROBATIO_COLOURS.dark_grey
  puts opts[:files]
  print $_PROBATIO_COLOURS.reset
end

#
# run

Probatio.run(opts)


# vim: set filetype=ruby

